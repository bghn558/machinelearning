import numpy as np

#构建单层分类器
#单层分类器是基于最小加权分类错误率的树桩
#伪代码
#将最小错误率minError设为+∞
#对数据集中的每个特征(第一层特征)：
    #对每个步长(第二层特征)：
        #对每个不等号(第三层特征)：
            #建立一颗单层决策树并利用加权数据集对它进行测试
            #如果错误率低于minError，则将当前单层决策树设为最佳单层决策树
#返回最佳单层决策树


def stumpclassify(datamat, dimen, thresthval, threthineq):  #根据阈值分类
    retarray = np.ones((np.shape(datamat)[0], 1)) #对数据集每一列的各个特征进行阈值过滤
    if threthineq == 'lt':
        retarray[datamat[:, dimen]<= thresthval] = -1#阈值的模式，将小于某一阈值的特征归类为-1
    else:
        retarray[datamat[:, dimen] > thresthval] = -1#将大于某一阈值的特征归类为-1
    return retarray


def buildstump(dataarray, classlabel, D):#将数据集和标签列表转为矩阵形式
    datamat = np.mat(dataarray)
    label = np.mat(classlabel).T
    m, n = np.shape(datamat)    #步长或区间总数 最优决策树信息 最优单层决策树预测结果
    numstep = 10
    beststump = {}
    bestclass = np.zeros((m,1))
    minerror = float('inf')  #最小错误率初始化为+∞
    for i in range(n):#遍历每一列的特征值
        rangemin = datamat[:,i].min()
        rangemax = datamat[:,i].max() #找出列中特征值的最小值和最大值
        stepsize = (rangemax - rangemin)/numstep #求取步长大小或者说区间间隔
        # 遍历各个步长区间    ——————Adaboost会在一个分类标签中取多个阈值分别计算 并取得最合适的阈值
        for j in range(-1,int(numstep)+1): #两种阈值过滤模式
            for inequal in ['lt','gt']: #阈值计算公式：最小值+j(-1<=j<=numSteps+1)*步长
                threshval = (rangemin + float(j)* stepsize)#选定阈值后，调用阈值过滤函数分类预测
                predictval = stumpclassify(datamat,i,threshval,inequal)
                erroarr = np.mat(np.ones((m,1))) #初始化错误向量
                erroarr[predictval == label] = 0 #将错误向量中分类正确项置0
                weighterror = D.T*erroarr #计算"加权"的错误率
                # 打印相关信息，可省略
                # print("split: dim %d, thresh %.2f,thresh inequal:\
                #    %s, the weighted error is %.3f",
                #    %(i,threshVal,inequal,weigthedError))
                # 如果当前错误率小于当前最小错误率，将当前错误率作为最小错误率
                # 存储相关信息
                if weighterror<minerror:
                    minerror = weighterror
                    bestclass = predictval.copy()
                    beststump['dim'] = i
                    beststump['thresh'] = threshval
                    beststump['inequal'] = inequal
    return beststump, minerror, bestclass #返回最佳单层决策树相关信息的字典，最小错误率，决策树预测输出结果
#完整AdaBoost算法实现
#算法实现伪代码
#对每次迭代：
    #利用buildStump()函数找到最佳的单层决策树
    #将最佳单层决策树加入到单层决策树数组
    #计算alpha
    #计算新的权重向量D
    #更新累计类别估计值
    #如果错误率为等于0.0，退出循环


def adaboosttrain(dataarr,classlabel,itration=40):
    weakclassarr = []#弱分类器相关信息列表
    m = np.shape(dataarr)[0] #获取数据集行数
    D = np.ones((m, 1))/m #初始化权重向量的每一项值相等
    aggclassest = np.zeros((m, 1)) #累计估计值向量
    for i in range(itration):
        beststump, error, classest = buildstump(dataarr, classlabel, D) #根据当前数据集，标签及权重建立最佳单层决策树
        print('D', D.T)
        alpha = float(0.5*np.log((1-error)/max(error, 1e-16)))
        beststump['alpha'] = alpha  #求单层决策树的系数alpha
        weakclassarr.append(beststump) #存储决策树的系数alpha到字典
        print('classest',classest.T) #预测正确为exp(-alpha),预测错误为exp(alpha)
        #即增大分类错误样本的权重，减少分类正确的数据点权重
        expon =np.multiply(-1*alpha*np.mat(classlabel).T,classest)
        D = np.multiply(D,np.exp(expon)) #更新权值向量
        D = D/D.sum()
        aggclassest += alpha*classest #累加当前单层决策树的加权预测值
        print('aggclassest:',aggclassest.T)
        aggerror = np.multiply(np.sign(aggclassest)!=np.mat(classlabel).T, np.ones((m,1)))#求出分类错的样本个数
        errorrate = aggerror.sum()/m  #计算错误率
        print('total error:',errorrate,'\n')
        if errorrate == 0:
            break
    return weakclassarr #返回弱分类器的组合列表

#测试adaBoost，adaBoost分类函数
#@datToClass:测试数据点
#@classifierArr：构建好的最终分类器
def adaclassify(datatoclass,classifierarr):
    datamat = np.mat(datatoclass) #构建数据向量或矩阵
    m = np.shape(datamat)[0]#获取矩阵行数
    aggclassest = np.zeros((m,1))  #遍历分类器列表中的每一个弱分类器
    for i in range(len(classifierarr)):
        classest = stumpclassify(datamat,classifierarr[i]['dim'],classifierarr[i]['thresh'],classifierarr[i]['ineq']) #每一个弱分类器对测试数据进行预测分类
        aggclassest += classifierarr[i]['alpha']*classest#对各个分类器的预测结果进行加权累加
        print(aggclassest)
    return np.sign(aggclassest)
