import numpy as np


def distEclud(vecA, vecB):
    return np.sqrt(sum(pow(vecA-vecB, 2)))


def randcent(data, k):  #创建包含K个随机质心的集合
    n = np.shape(data)[1]
    cent = np.mat(np.zeros((k,n)))
    for i in range(n):
        minJ = min(data[:, i])
        rangeJ = float(max(data[:, i]) - minJ)
        cent[:, i] = minJ +rangeJ*np.random.rand(k, 1)
    return cent


def kmeans(data, k, distmeans=distEclud, creatcent=randcent):
    m = np.shape(data)[0]        #数据个数
    clusterassment = np.mat(np.zeros(m, 2))    #第一列储存索引值，第二列储存误差
    centroids = creatcent(data, k)     #质心
    clusterchange = True
    while clusterchange:
        clusterchange = False
        for i in range(m):
            mindist = float('inf')
            minindex = -1
            for j in range(k):
                disJI = distmeans(centroids[j, :], data[i, :])
                if disJI < mindist:
                    mindist = disJI
                    minindex = j
            if clusterassment[i, 0] != minindex: clusterchange = True
            clusterassment[i, :] = minindex, mindist**2
        print(centroids)
        for cent in range(k): #再次计算质心更新位置 计算相同簇内的均值作为质心
            ptsinclust = data[np.nonzero(clusterassment[:,0].A == cent)[0]]
            centroids[cent, :] = np.mean(ptsinclust, axis=0)
    return centroids, clusterassment


def bimeans(data, k, dismean=distEclud):
    m = np.shape(data)[0]
    clusterassment = np.mat(np.zeros(m, 2))
    centroid = np.mean(data,axis=0).tolist()[0]
